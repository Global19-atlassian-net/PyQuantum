{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# TCL\n",
    "from PyQuantum.TCL.Cavity import Cavity\n",
    "from PyQuantum.TCL.Hamiltonian import *\n",
    "\n",
    "from PyQuantum.TCL.WaveFunction import *\n",
    "from PyQuantum.TCL.DensityMatrix import *\n",
    "\n",
    "from PyQuantum.TCL.Evolution import *"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Common\n",
    "from PyQuantum.Common.LoadPackage import *\n",
    "from PyQuantum.Common.STR import *\n",
    "\n",
    "from PyQuantum.Common.Tools import mkdir\n",
    "from PyQuantum.Common.Print import *\n",
    "from PyQuantum.Common.PyPlot import PyPlot3D\n",
    "\n",
    "# from shutil import copyfile\n",
    "# from numpy.random import rand"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "config = load_pkg(\"config\", \"PyQuantum/TCL/config.py\")\n",
    "\n",
    "mkdir(config.path)\n",
    "\n",
    "# copyfile(\"PyQuantum/TC/config.py\", config.path + '/config.py')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1;36;1mCavity:\u001b[1;32;0m\n",
      "\u001b[1;33;1mwc: \u001b[1;32;0m21.506 GHz\n",
      "\n",
      "\u001b[1;33;1mwa: \u001b[1;32;0m21.506 GHz\n",
      "\n",
      "\u001b[1;33;1m g: \u001b[1;32;0m215.06 MHz\n",
      "\n",
      "\u001b[1;33;1m n_atoms: \u001b[1;32;0m2\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "cavity = Cavity(wc=config.wc, wa=config.wa, g=config.g, n_atoms=config.n_atoms, n_levels=config.n_levels)\n",
    "\n",
    "cavity.print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "T: 5e-08\n",
      "nt: 25\n",
      "dt: 1.9999999999999997e-09\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(\"T:\", config.T)\n",
    "print(\"nt:\", config.nt)\n",
    "print(\"dt:\", config.dt)\n",
    "\n",
    "print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>86.024 GHz</td>\n",
       "      <td>0.0 Hz</td>\n",
       "      <td>0.0 Hz</td>\n",
       "      <td>430.12 MHz</td>\n",
       "      <td>0.0 Hz</td>\n",
       "      <td>0.0 Hz</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.0 Hz</td>\n",
       "      <td>43.012 GHz</td>\n",
       "      <td>0.0 Hz</td>\n",
       "      <td>215.06 MHz</td>\n",
       "      <td>215.06 MHz</td>\n",
       "      <td>0.0 Hz</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.0 Hz</td>\n",
       "      <td>0.0 Hz</td>\n",
       "      <td>86.024 GHz</td>\n",
       "      <td>0.0 Hz</td>\n",
       "      <td>430.12 MHz</td>\n",
       "      <td>0.0 Hz</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>430.12 MHz</td>\n",
       "      <td>215.06 MHz</td>\n",
       "      <td>0.0 Hz</td>\n",
       "      <td>43.012 GHz</td>\n",
       "      <td>0.0 Hz</td>\n",
       "      <td>304.141 MHz</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.0 Hz</td>\n",
       "      <td>215.06 MHz</td>\n",
       "      <td>430.12 MHz</td>\n",
       "      <td>0.0 Hz</td>\n",
       "      <td>43.012 GHz</td>\n",
       "      <td>304.141 MHz</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.0 Hz</td>\n",
       "      <td>0.0 Hz</td>\n",
       "      <td>0.0 Hz</td>\n",
       "      <td>304.141 MHz</td>\n",
       "      <td>304.141 MHz</td>\n",
       "      <td>43.012 GHz</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            0           1           2            3            4            5\n",
       "0  86.024 GHz      0.0 Hz      0.0 Hz   430.12 MHz       0.0 Hz       0.0 Hz\n",
       "1      0.0 Hz  43.012 GHz      0.0 Hz   215.06 MHz   215.06 MHz       0.0 Hz\n",
       "2      0.0 Hz      0.0 Hz  86.024 GHz       0.0 Hz   430.12 MHz       0.0 Hz\n",
       "3  430.12 MHz  215.06 MHz      0.0 Hz   43.012 GHz       0.0 Hz  304.141 MHz\n",
       "4      0.0 Hz  215.06 MHz  430.12 MHz       0.0 Hz   43.012 GHz  304.141 MHz\n",
       "5      0.0 Hz      0.0 Hz      0.0 Hz  304.141 MHz  304.141 MHz   43.012 GHz"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "H = Hamiltonian(capacity=config.capacity,\n",
    "                cavity=cavity, RWA=True, reduced=True)\n",
    "\n",
    "# H.print_states()\n",
    "\n",
    "H.iprint()\n",
    "H.df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0, [0, 2]] 0j\n",
      "[0, [1, 1]] 0j\n",
      "[0, [2, 0]] 0j\n",
      "[1, [0, 1]] (1+0j)\n",
      "[1, [1, 0]] 0j\n",
      "[2, [0, 0]] 0j\n"
     ]
    }
   ],
   "source": [
    "w_0 = WaveFunction(states=H.states, init_state=config.init_state)\n",
    "\n",
    "w_0.print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>[0, [0, 2]]</th>\n",
       "      <th>[0, [1, 1]]</th>\n",
       "      <th>[0, [2, 0]]</th>\n",
       "      <th>[1, [0, 1]]</th>\n",
       "      <th>[1, [1, 0]]</th>\n",
       "      <th>[2, [0, 0]]</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>[0, [0, 2]]</th>\n",
       "      <td>0j</td>\n",
       "      <td>0j</td>\n",
       "      <td>0j</td>\n",
       "      <td>0j</td>\n",
       "      <td>0j</td>\n",
       "      <td>0j</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>[0, [1, 1]]</th>\n",
       "      <td>0j</td>\n",
       "      <td>0j</td>\n",
       "      <td>0j</td>\n",
       "      <td>0j</td>\n",
       "      <td>0j</td>\n",
       "      <td>0j</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>[0, [2, 0]]</th>\n",
       "      <td>0j</td>\n",
       "      <td>0j</td>\n",
       "      <td>0j</td>\n",
       "      <td>0j</td>\n",
       "      <td>0j</td>\n",
       "      <td>0j</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>[1, [0, 1]]</th>\n",
       "      <td>0j</td>\n",
       "      <td>0j</td>\n",
       "      <td>0j</td>\n",
       "      <td>(1+0j)</td>\n",
       "      <td>0j</td>\n",
       "      <td>0j</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>[1, [1, 0]]</th>\n",
       "      <td>0j</td>\n",
       "      <td>0j</td>\n",
       "      <td>0j</td>\n",
       "      <td>0j</td>\n",
       "      <td>0j</td>\n",
       "      <td>0j</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>[2, [0, 0]]</th>\n",
       "      <td>0j</td>\n",
       "      <td>0j</td>\n",
       "      <td>0j</td>\n",
       "      <td>0j</td>\n",
       "      <td>0j</td>\n",
       "      <td>0j</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             [0, [0, 2]]  [0, [1, 1]]  [0, [2, 0]]  [1, [0, 1]]  [1, [1, 0]]  \\\n",
       "[0, [0, 2]]           0j           0j           0j           0j           0j   \n",
       "[0, [1, 1]]           0j           0j           0j           0j           0j   \n",
       "[0, [2, 0]]           0j           0j           0j           0j           0j   \n",
       "[1, [0, 1]]           0j           0j           0j       (1+0j)           0j   \n",
       "[1, [1, 0]]           0j           0j           0j           0j           0j   \n",
       "[2, [0, 0]]           0j           0j           0j           0j           0j   \n",
       "\n",
       "             [2, [0, 0]]  \n",
       "[0, [0, 2]]           0j  \n",
       "[0, [1, 1]]           0j  \n",
       "[0, [2, 0]]           0j  \n",
       "[1, [0, 1]]           0j  \n",
       "[1, [1, 0]]           0j  \n",
       "[2, [0, 0]]           0j  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ro_0 = DensityMatrix(w_0)\n",
    "\n",
    "ro_0.iprint()\n",
    "ro_0.df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "36 36\n",
      "36 36\n",
      "36 36\n",
      "36 36\n",
      "36 36\n",
      "36 36\n",
      "36 36\n",
      "36 36\n",
      "36 36\n",
      "36 36\n",
      "36 36\n",
      "36 36\n",
      "36 36\n",
      "36 36\n",
      "36 36\n",
      "36 36\n",
      "36 36\n",
      "36 36\n",
      "36 36\n",
      "36 36\n",
      "36 36\n",
      "36 36\n",
      "36 36\n",
      "36 36\n",
      "36 36\n"
     ]
    }
   ],
   "source": [
    "run(ro_0, H, dt=config.dt, nt=config.nt, l=config.l, config=config)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'PlotBuilder3D' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-10-80a3fc5b1bf1>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mplt\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mPlotBuilder3D\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_width\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m950\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_height\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m800\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'PlotBuilder3D' is not defined"
     ]
    }
   ],
   "source": [
    "from PyQuantum.TCM_Full.PlotBuilder3D import PlotBuilder3D\n",
    "\n",
    "plt = PlotBuilder3D()\n",
    "\n",
    "plt.set_width(950)\n",
    "plt.set_height(800)\n",
    "\n",
    "# ---------------------------------------------- TITLE --------------------------------------------\n",
    "title = \"\"\n",
    "\n",
    "if config.capacity - config.n_atoms > 0:\n",
    "    title += \"<b>\" + str(config.capacity - config.n) + \\\n",
    "        \" фотонов в полости\" + \"</b>\" + \"<br><br>\"\n",
    "else:\n",
    "    title += \"<b>\" + \"empty cavity\" + \"</b>\" + \"<br><br>\"\n",
    "\n",
    "title += \"<b>\"\n",
    "title += \"n_atoms = \" + str(config.n_atoms)\n",
    "\n",
    "# title += \"<br>atoms state: |Ψ<sub>0</sub> i = |11...1>A<sub>0</sub> |00...0>A<sub>1</sub> |vaki<sub>p</sub>\" + \\\n",
    "#     str(config.init_state)\n",
    "title += \"<br>\"\n",
    "title += \"<br>w<sub>c</sub> = \" + wc_str(config.wc)\n",
    "title += \"<br>w<sub>a</sub> = \" + wa_str(config.wa)\n",
    "title += \"<br><br> g/hw<sub>c</sub> = \" + str(config.g/config.wc)\n",
    "title += \"<br>\"\n",
    "title += \"<br>\"\n",
    "title += \"</b>\"\n",
    "\n",
    "plt.set_title(title)\n",
    "# ---------------------------------------------- TITLE --------------------------------------------\n",
    "\n",
    "# ---------------------------------------------- SCALE --------------------------------------------\n",
    "y_scale = 1\n",
    "\n",
    "if config.T < 0.25 * config.mks:\n",
    "    y_scale = 0.1\n",
    "elif config.T <= 0.5 * config.mks:\n",
    "    y_scale = 0.025\n",
    "elif config.T == 0.5 * config.mks:\n",
    "    y_scale = 0.01\n",
    "elif config.T == 1 * config.mks:\n",
    "    y_scale = 7.5\n",
    "    # y_scale = 10\n",
    "elif config.T == 5 * config.mks:\n",
    "    y_scale = 1\n",
    "\n",
    "plt.set_yscale(y_scale)\n",
    "\n",
    "plt.set_xaxis(\"states\")\n",
    "plt.set_yaxis(\"time, \" + T_str_mark(config.T))\n",
    "plt.set_zaxis(\"prob.\\t\\t\\t\\t\\t\\t.\")\n",
    "# ---------------------------------------------- SCALE --------------------------------------------\n",
    "\n",
    "plt.iplot(\n",
    "    x_csv=config.x_csv,\n",
    "    y_csv=config.y_csv,\n",
    "    z_csv=config.z_csv,\n",
    ")\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
