# ---------------------------------------------------------------------------------------------------------------------
# scientific
import numpy as np
import pandas as pd
# ---------------------------------------------------------------------------------------------------------------------
# PyQuantum.TC
from PyQuantum.TC.WaveFunction import WaveFunction
# ---------------------------------------------------------------------------------------------------------------------
# PyQuantum.Common
from PyQuantum.Common.Matrix import *
# ---------------------------------------------------------------------------------------------------------------------


# -------------------------------------------------------------------------------------------------
class DensityMatrix(Matrix):
    # -----------------------------------------------------------------------------------------------------------------
    # ---------------------------------------------------- INIT -------------------------------------------------------
    # -----------------------------------------------------------------------------------------------------------------
    def __init__(self, wf):
        Assert(isinstance(wf, WaveFunction), "wf is not WaveFunction")

        super(DensityMatrix, self).__init__(
            m=wf.m, n=wf.m, dtype=np.complex128)

        wf_data = wf.data

        ro_data = wf_data.dot(wf_data.getH())

        Assert(np.shape(ro_data) == (self.m, self.n), "size mismatch")

        self.data = ro_data
        # self.data = np.matrix(ro_data, dtype=np.complex128)

        self.states = wf.states
        self.size = np.shape(self.data)[0]
    # -----------------------------------------------------------------------------------------------------------------
    # -----------------------------------------------------------------------------------------------------------------



    # -----------------------------------------------------------------------------------------------------------------
    # ---------------------------------------------------- IPRINT -----------------------------------------------------
    # -----------------------------------------------------------------------------------------------------------------
    def iprint(self):
        df = pd.DataFrame()

        for i in range(self.size):
            for j in range(self.size):
                df.loc[i, j] = self.data[i, j]

        df.index = df.columns = [str(v) for v in self.states.values()]

        self.df = df
    # -----------------------------------------------------------------------------------------------------------------
    # -----------------------------------------------------------------------------------------------------------------



    # -----------------------------------------------------------------------------------------------------------------
    # ---------------------------------------------------- NORMALIZE --------------------------------------------------
    # -----------------------------------------------------------------------------------------------------------------
    def normalize(self):
        self.data = (self.data+self.data.getH())/2.0
        self.data /= np.sum(np.abs(self.data.diagonal()))
    # -----------------------------------------------------------------------------------------------------------------
    # -----------------------------------------------------------------------------------------------------------------



    # -----------------------------------------------------------------------------------------------------------------
    # ---------------------------------------------------- ENERGY -----------------------------------------------------
    # -----------------------------------------------------------------------------------------------------------------
    def energy(self, capacity, n_atoms, states_bin, diag_abs):
        energy = {}

        energy['0_1'] = [0] * (capacity['0_1'] + n_atoms+1)
        energy['1_2'] = [0] * (capacity['1_2'] + n_atoms+1)

        for k in capacity.keys():
            for i in range(1, len(states_bin)):
                if i not in states_bin[k]:
                    break
                energy[k][i] += np.sum(diag_abs[states_bin[k][i]])
                # for j in states_bin[i]:
                #     energy[i] += diag_abs[j]
                energy[k][i] *= i

        # for i in range(1, len(states_bin)):

        return energy
    # -----------------------------------------------------------------------------------------------------------------
    # -----------------------------------------------------------------------------------------------------------------

# =====================================================================================================================
